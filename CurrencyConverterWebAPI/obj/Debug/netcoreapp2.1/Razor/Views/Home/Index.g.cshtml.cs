#pragma checksum "C:\Users\Rowan\source\repos\CurrencyConverterWebAPI\CurrencyConverterWebAPI\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1ef5d4babebbca7ab9d67f3a7aa8badca1823af2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Rowan\source\repos\CurrencyConverterWebAPI\CurrencyConverterWebAPI\Views\_ViewImports.cshtml"
using CurrencyConverterWebAPI;

#line default
#line hidden
#line 2 "C:\Users\Rowan\source\repos\CurrencyConverterWebAPI\CurrencyConverterWebAPI\Views\_ViewImports.cshtml"
using CurrencyConverterWebAPI.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1ef5d4babebbca7ab9d67f3a7aa8badca1823af2", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fcdc2f778c2a7a2f8411fc2c5e7dc707687d2afc", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\Rowan\source\repos\CurrencyConverterWebAPI\CurrencyConverterWebAPI\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
            BeginContext(45, 3239, true);
            WriteLiteral(@"

<div class=""text-center converter-box"">
    <input id=""inputValue"" placeholder=""Amount (GBP)"" class=""currency-input"" />

    <div style=""height: 6rem;"">
        <div id=""outputResult"" class=""converter-text"" style=""font-weight:700;""></div>
        <div id=""countdownReadout"" class=""converter-text""></div>
    </div>
    <button onclick=""getExchangeData()"" class=""converter-btn"">Convert</button>
</div>

<script>

    var seconds = -1;
    var countdownTimer;
    function updateTimer() {
        if (seconds > 0) {
            var minutes = Math.round((seconds - 30) / 60);
            var remainingSeconds = seconds % 60;
            if (remainingSeconds < 10) {
                remainingSeconds = ""0"" + remainingSeconds;
            }
            document.getElementById('countdownReadout').innerHTML = ""Expires in <span style='font-weight:700;'>"" + minutes + "" mins, "" + remainingSeconds + "" seconds</span>"";
            seconds--;
        } else if (seconds == 0) {
            document.getEle");
            WriteLiteral(@"mentById('countdownReadout').innerHTML = ""Data Expired"";
        } else {
            // Initial State
            document.getElementById('countdownReadout').innerHTML = """";
        }
    }
    
    function getExchangeData() {
        var inputVal = $('#inputValue').val();
        var sendCall = true;
        if (inputVal.length == 0) {
            $('#outputResult').html('You must input a numeric value');
            sendCall = false;
        }
        var parsedFloat = parseFloat(inputVal);
        console.log(parsedFloat + '');
        if (sendCall && isNaN(parsedFloat)) {
            $('#outputResult').html(inputVal + ' is not a number');
            sendCall = false;
        }
        if (sendCall) {
            $('#outputResult').html("""");
            $.ajax({
                url: ""https://api.exchangerate-api.com/v4/latest/GBP"",
                type: 'GET',
                success: function (res) {
                    console.log(res);
                    seconds = 600;
  ");
            WriteLiteral(@"                  countdownTimer = setInterval('updateTimer()', 1000);
                    updateTimer(); // run it once, just to make the reaction-time a bit snappier.
                    translateExchangeData(res);
                },
                error: function () {
                    $('#outputResult').html(""Sorry, something went wrong"");
                }
            });
        }
    }

    function translateExchangeData(data) {
        var inputVal = $('#inputValue').val();
        var parsedValue = parseFloat(inputVal);
        var rates = data.rates;
        if (rates) {
            var aud = rates.AUD;
            var calculatedValue = parsedValue * aud;
            var readout = '' + parsedValue.toLocaleString(""en-EN"", { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ""GBP is the equivalent of "" + calculatedValue.toLocaleString(""en-EN"", { minimumFractionDigits: 2,maximumFractionDigits: 2 }) + ""AUD"";

            $('#outputResult').html(readout);
            console.");
            WriteLiteral("log(\'success\');\r\n        } else {\r\n            $(\'#outputResult\').html(\"Sorry, something went wrong\");\r\n            console.log(\'fail\');\r\n        }\r\n    }\r\n</script>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
